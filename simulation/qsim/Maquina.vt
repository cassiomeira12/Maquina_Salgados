// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/05/2017 13:04:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Maquina
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Maquina_vlg_sample_tst(
	clk,
	confirmar_moeda,
	confirmar_salgado,
	contador,
	iniciar,
	liberar,
	moedas,
	reset,
	sampler_tx
);
input  clk;
input  confirmar_moeda;
input  confirmar_salgado;
input  contador;
input  iniciar;
input  liberar;
input [1:0] moedas;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or confirmar_moeda or confirmar_salgado or contador or iniciar or liberar or moedas or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Maquina_vlg_check_tst (
	display_dinheiro_centena,
	display_dinheiro_dezena,
	display_dinheiro_unidade,
	display_salgado,
	estado,
	led_verde,
	led_vermelho,
	saldo_dinheiro,
	valor_salgado,
	sampler_rx
);
input [6:0] display_dinheiro_centena;
input [6:0] display_dinheiro_dezena;
input [6:0] display_dinheiro_unidade;
input [6:0] display_salgado;
input [2:0] estado;
input  led_verde;
input  led_vermelho;
input [9:0] saldo_dinheiro;
input [9:0] valor_salgado;
input sampler_rx;

reg [6:0] display_dinheiro_centena_expected;
reg [6:0] display_dinheiro_dezena_expected;
reg [6:0] display_dinheiro_unidade_expected;
reg [6:0] display_salgado_expected;
reg [2:0] estado_expected;
reg  led_verde_expected;
reg  led_vermelho_expected;
reg [9:0] saldo_dinheiro_expected;
reg [9:0] valor_salgado_expected;

reg [6:0] display_dinheiro_centena_prev;
reg [6:0] display_dinheiro_dezena_prev;
reg [6:0] display_dinheiro_unidade_prev;
reg [6:0] display_salgado_prev;
reg [2:0] estado_prev;
reg  led_verde_prev;
reg  led_vermelho_prev;
reg [9:0] saldo_dinheiro_prev;
reg [9:0] valor_salgado_prev;

reg [6:0] display_dinheiro_centena_expected_prev;
reg [6:0] display_dinheiro_dezena_expected_prev;
reg [6:0] display_dinheiro_unidade_expected_prev;
reg [6:0] display_salgado_expected_prev;
reg [2:0] estado_expected_prev;
reg  led_verde_expected_prev;
reg  led_vermelho_expected_prev;
reg [9:0] saldo_dinheiro_expected_prev;
reg [9:0] valor_salgado_expected_prev;

reg [6:0] last_display_dinheiro_centena_exp;
reg [6:0] last_display_dinheiro_dezena_exp;
reg [6:0] last_display_dinheiro_unidade_exp;
reg [6:0] last_display_salgado_exp;
reg [2:0] last_estado_exp;
reg  last_led_verde_exp;
reg  last_led_vermelho_exp;
reg [9:0] last_saldo_dinheiro_exp;
reg [9:0] last_valor_salgado_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	display_dinheiro_centena_prev = display_dinheiro_centena;
	display_dinheiro_dezena_prev = display_dinheiro_dezena;
	display_dinheiro_unidade_prev = display_dinheiro_unidade;
	display_salgado_prev = display_salgado;
	estado_prev = estado;
	led_verde_prev = led_verde;
	led_vermelho_prev = led_vermelho;
	saldo_dinheiro_prev = saldo_dinheiro;
	valor_salgado_prev = valor_salgado;
end

// update expected /o prevs

always @(trigger)
begin
	display_dinheiro_centena_expected_prev = display_dinheiro_centena_expected;
	display_dinheiro_dezena_expected_prev = display_dinheiro_dezena_expected;
	display_dinheiro_unidade_expected_prev = display_dinheiro_unidade_expected;
	display_salgado_expected_prev = display_salgado_expected;
	estado_expected_prev = estado_expected;
	led_verde_expected_prev = led_verde_expected;
	led_vermelho_expected_prev = led_vermelho_expected;
	saldo_dinheiro_expected_prev = saldo_dinheiro_expected;
	valor_salgado_expected_prev = valor_salgado_expected;
end


// expected estado[ 2 ]
initial
begin
	estado_expected[2] = 1'bX;
end 
// expected estado[ 1 ]
initial
begin
	estado_expected[1] = 1'bX;
end 
// expected estado[ 0 ]
initial
begin
	estado_expected[0] = 1'bX;
end 
// expected saldo_dinheiro[ 9 ]
initial
begin
	saldo_dinheiro_expected[9] = 1'bX;
end 
// expected saldo_dinheiro[ 8 ]
initial
begin
	saldo_dinheiro_expected[8] = 1'bX;
end 
// expected saldo_dinheiro[ 7 ]
initial
begin
	saldo_dinheiro_expected[7] = 1'bX;
end 
// expected saldo_dinheiro[ 6 ]
initial
begin
	saldo_dinheiro_expected[6] = 1'bX;
end 
// expected saldo_dinheiro[ 5 ]
initial
begin
	saldo_dinheiro_expected[5] = 1'bX;
end 
// expected saldo_dinheiro[ 4 ]
initial
begin
	saldo_dinheiro_expected[4] = 1'bX;
end 
// expected saldo_dinheiro[ 3 ]
initial
begin
	saldo_dinheiro_expected[3] = 1'bX;
end 
// expected saldo_dinheiro[ 2 ]
initial
begin
	saldo_dinheiro_expected[2] = 1'bX;
end 
// expected saldo_dinheiro[ 1 ]
initial
begin
	saldo_dinheiro_expected[1] = 1'bX;
end 
// expected saldo_dinheiro[ 0 ]
initial
begin
	saldo_dinheiro_expected[0] = 1'bX;
end 
// expected valor_salgado[ 9 ]
initial
begin
	valor_salgado_expected[9] = 1'bX;
end 
// expected valor_salgado[ 8 ]
initial
begin
	valor_salgado_expected[8] = 1'bX;
end 
// expected valor_salgado[ 7 ]
initial
begin
	valor_salgado_expected[7] = 1'bX;
end 
// expected valor_salgado[ 6 ]
initial
begin
	valor_salgado_expected[6] = 1'bX;
end 
// expected valor_salgado[ 5 ]
initial
begin
	valor_salgado_expected[5] = 1'bX;
end 
// expected valor_salgado[ 4 ]
initial
begin
	valor_salgado_expected[4] = 1'bX;
end 
// expected valor_salgado[ 3 ]
initial
begin
	valor_salgado_expected[3] = 1'bX;
end 
// expected valor_salgado[ 2 ]
initial
begin
	valor_salgado_expected[2] = 1'bX;
end 
// expected valor_salgado[ 1 ]
initial
begin
	valor_salgado_expected[1] = 1'bX;
end 
// expected valor_salgado[ 0 ]
initial
begin
	valor_salgado_expected[0] = 1'bX;
end 
// expected display_salgado[ 6 ]
initial
begin
	display_salgado_expected[6] = 1'bX;
end 
// expected display_salgado[ 5 ]
initial
begin
	display_salgado_expected[5] = 1'bX;
end 
// expected display_salgado[ 4 ]
initial
begin
	display_salgado_expected[4] = 1'bX;
end 
// expected display_salgado[ 3 ]
initial
begin
	display_salgado_expected[3] = 1'bX;
end 
// expected display_salgado[ 2 ]
initial
begin
	display_salgado_expected[2] = 1'bX;
end 
// expected display_salgado[ 1 ]
initial
begin
	display_salgado_expected[1] = 1'bX;
end 
// expected display_salgado[ 0 ]
initial
begin
	display_salgado_expected[0] = 1'bX;
end 
// expected display_dinheiro_centena[ 6 ]
initial
begin
	display_dinheiro_centena_expected[6] = 1'bX;
end 
// expected display_dinheiro_centena[ 5 ]
initial
begin
	display_dinheiro_centena_expected[5] = 1'bX;
end 
// expected display_dinheiro_centena[ 4 ]
initial
begin
	display_dinheiro_centena_expected[4] = 1'bX;
end 
// expected display_dinheiro_centena[ 3 ]
initial
begin
	display_dinheiro_centena_expected[3] = 1'bX;
end 
// expected display_dinheiro_centena[ 2 ]
initial
begin
	display_dinheiro_centena_expected[2] = 1'bX;
end 
// expected display_dinheiro_centena[ 1 ]
initial
begin
	display_dinheiro_centena_expected[1] = 1'bX;
end 
// expected display_dinheiro_centena[ 0 ]
initial
begin
	display_dinheiro_centena_expected[0] = 1'bX;
end 
// expected display_dinheiro_dezena[ 6 ]
initial
begin
	display_dinheiro_dezena_expected[6] = 1'bX;
end 
// expected display_dinheiro_dezena[ 5 ]
initial
begin
	display_dinheiro_dezena_expected[5] = 1'bX;
end 
// expected display_dinheiro_dezena[ 4 ]
initial
begin
	display_dinheiro_dezena_expected[4] = 1'bX;
end 
// expected display_dinheiro_dezena[ 3 ]
initial
begin
	display_dinheiro_dezena_expected[3] = 1'bX;
end 
// expected display_dinheiro_dezena[ 2 ]
initial
begin
	display_dinheiro_dezena_expected[2] = 1'bX;
end 
// expected display_dinheiro_dezena[ 1 ]
initial
begin
	display_dinheiro_dezena_expected[1] = 1'bX;
end 
// expected display_dinheiro_dezena[ 0 ]
initial
begin
	display_dinheiro_dezena_expected[0] = 1'bX;
end 
// expected display_dinheiro_unidade[ 6 ]
initial
begin
	display_dinheiro_unidade_expected[6] = 1'bX;
end 
// expected display_dinheiro_unidade[ 5 ]
initial
begin
	display_dinheiro_unidade_expected[5] = 1'bX;
end 
// expected display_dinheiro_unidade[ 4 ]
initial
begin
	display_dinheiro_unidade_expected[4] = 1'bX;
end 
// expected display_dinheiro_unidade[ 3 ]
initial
begin
	display_dinheiro_unidade_expected[3] = 1'bX;
end 
// expected display_dinheiro_unidade[ 2 ]
initial
begin
	display_dinheiro_unidade_expected[2] = 1'bX;
end 
// expected display_dinheiro_unidade[ 1 ]
initial
begin
	display_dinheiro_unidade_expected[1] = 1'bX;
end 
// expected display_dinheiro_unidade[ 0 ]
initial
begin
	display_dinheiro_unidade_expected[0] = 1'bX;
end 

// expected led_verde
initial
begin
	led_verde_expected = 1'bX;
end 

// expected led_vermelho
initial
begin
	led_vermelho_expected = 1'bX;
end 
// generate trigger
always @(display_dinheiro_centena_expected or display_dinheiro_centena or display_dinheiro_dezena_expected or display_dinheiro_dezena or display_dinheiro_unidade_expected or display_dinheiro_unidade or display_salgado_expected or display_salgado or estado_expected or estado or led_verde_expected or led_verde or led_vermelho_expected or led_vermelho or saldo_dinheiro_expected or saldo_dinheiro or valor_salgado_expected or valor_salgado)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected display_dinheiro_centena = %b | expected display_dinheiro_dezena = %b | expected display_dinheiro_unidade = %b | expected display_salgado = %b | expected estado = %b | expected led_verde = %b | expected led_vermelho = %b | expected saldo_dinheiro = %b | expected valor_salgado = %b | ",display_dinheiro_centena_expected_prev,display_dinheiro_dezena_expected_prev,display_dinheiro_unidade_expected_prev,display_salgado_expected_prev,estado_expected_prev,led_verde_expected_prev,led_vermelho_expected_prev,saldo_dinheiro_expected_prev,valor_salgado_expected_prev);
	$display("| real display_dinheiro_centena = %b | real display_dinheiro_dezena = %b | real display_dinheiro_unidade = %b | real display_salgado = %b | real estado = %b | real led_verde = %b | real led_vermelho = %b | real saldo_dinheiro = %b | real valor_salgado = %b | ",display_dinheiro_centena_prev,display_dinheiro_dezena_prev,display_dinheiro_unidade_prev,display_salgado_prev,estado_prev,led_verde_prev,led_vermelho_prev,saldo_dinheiro_prev,valor_salgado_prev);
`endif
	if (
		( display_dinheiro_centena_expected_prev[0] !== 1'bx ) && ( display_dinheiro_centena_prev[0] !== display_dinheiro_centena_expected_prev[0] )
		&& ((display_dinheiro_centena_expected_prev[0] !== last_display_dinheiro_centena_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_centena[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_centena_expected_prev);
		$display ("     Real value = %b", display_dinheiro_centena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_dinheiro_centena_exp[0] = display_dinheiro_centena_expected_prev[0];
	end
	if (
		( display_dinheiro_centena_expected_prev[1] !== 1'bx ) && ( display_dinheiro_centena_prev[1] !== display_dinheiro_centena_expected_prev[1] )
		&& ((display_dinheiro_centena_expected_prev[1] !== last_display_dinheiro_centena_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_centena[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_centena_expected_prev);
		$display ("     Real value = %b", display_dinheiro_centena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_dinheiro_centena_exp[1] = display_dinheiro_centena_expected_prev[1];
	end
	if (
		( display_dinheiro_centena_expected_prev[2] !== 1'bx ) && ( display_dinheiro_centena_prev[2] !== display_dinheiro_centena_expected_prev[2] )
		&& ((display_dinheiro_centena_expected_prev[2] !== last_display_dinheiro_centena_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_centena[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_centena_expected_prev);
		$display ("     Real value = %b", display_dinheiro_centena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_dinheiro_centena_exp[2] = display_dinheiro_centena_expected_prev[2];
	end
	if (
		( display_dinheiro_centena_expected_prev[3] !== 1'bx ) && ( display_dinheiro_centena_prev[3] !== display_dinheiro_centena_expected_prev[3] )
		&& ((display_dinheiro_centena_expected_prev[3] !== last_display_dinheiro_centena_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_centena[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_centena_expected_prev);
		$display ("     Real value = %b", display_dinheiro_centena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_dinheiro_centena_exp[3] = display_dinheiro_centena_expected_prev[3];
	end
	if (
		( display_dinheiro_centena_expected_prev[4] !== 1'bx ) && ( display_dinheiro_centena_prev[4] !== display_dinheiro_centena_expected_prev[4] )
		&& ((display_dinheiro_centena_expected_prev[4] !== last_display_dinheiro_centena_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_centena[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_centena_expected_prev);
		$display ("     Real value = %b", display_dinheiro_centena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_dinheiro_centena_exp[4] = display_dinheiro_centena_expected_prev[4];
	end
	if (
		( display_dinheiro_centena_expected_prev[5] !== 1'bx ) && ( display_dinheiro_centena_prev[5] !== display_dinheiro_centena_expected_prev[5] )
		&& ((display_dinheiro_centena_expected_prev[5] !== last_display_dinheiro_centena_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_centena[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_centena_expected_prev);
		$display ("     Real value = %b", display_dinheiro_centena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_dinheiro_centena_exp[5] = display_dinheiro_centena_expected_prev[5];
	end
	if (
		( display_dinheiro_centena_expected_prev[6] !== 1'bx ) && ( display_dinheiro_centena_prev[6] !== display_dinheiro_centena_expected_prev[6] )
		&& ((display_dinheiro_centena_expected_prev[6] !== last_display_dinheiro_centena_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_centena[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_centena_expected_prev);
		$display ("     Real value = %b", display_dinheiro_centena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_dinheiro_centena_exp[6] = display_dinheiro_centena_expected_prev[6];
	end
	if (
		( display_dinheiro_dezena_expected_prev[0] !== 1'bx ) && ( display_dinheiro_dezena_prev[0] !== display_dinheiro_dezena_expected_prev[0] )
		&& ((display_dinheiro_dezena_expected_prev[0] !== last_display_dinheiro_dezena_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_dezena[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_dezena_expected_prev);
		$display ("     Real value = %b", display_dinheiro_dezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_dinheiro_dezena_exp[0] = display_dinheiro_dezena_expected_prev[0];
	end
	if (
		( display_dinheiro_dezena_expected_prev[1] !== 1'bx ) && ( display_dinheiro_dezena_prev[1] !== display_dinheiro_dezena_expected_prev[1] )
		&& ((display_dinheiro_dezena_expected_prev[1] !== last_display_dinheiro_dezena_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_dezena[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_dezena_expected_prev);
		$display ("     Real value = %b", display_dinheiro_dezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_dinheiro_dezena_exp[1] = display_dinheiro_dezena_expected_prev[1];
	end
	if (
		( display_dinheiro_dezena_expected_prev[2] !== 1'bx ) && ( display_dinheiro_dezena_prev[2] !== display_dinheiro_dezena_expected_prev[2] )
		&& ((display_dinheiro_dezena_expected_prev[2] !== last_display_dinheiro_dezena_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_dezena[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_dezena_expected_prev);
		$display ("     Real value = %b", display_dinheiro_dezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_dinheiro_dezena_exp[2] = display_dinheiro_dezena_expected_prev[2];
	end
	if (
		( display_dinheiro_dezena_expected_prev[3] !== 1'bx ) && ( display_dinheiro_dezena_prev[3] !== display_dinheiro_dezena_expected_prev[3] )
		&& ((display_dinheiro_dezena_expected_prev[3] !== last_display_dinheiro_dezena_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_dezena[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_dezena_expected_prev);
		$display ("     Real value = %b", display_dinheiro_dezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_dinheiro_dezena_exp[3] = display_dinheiro_dezena_expected_prev[3];
	end
	if (
		( display_dinheiro_dezena_expected_prev[4] !== 1'bx ) && ( display_dinheiro_dezena_prev[4] !== display_dinheiro_dezena_expected_prev[4] )
		&& ((display_dinheiro_dezena_expected_prev[4] !== last_display_dinheiro_dezena_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_dezena[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_dezena_expected_prev);
		$display ("     Real value = %b", display_dinheiro_dezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_dinheiro_dezena_exp[4] = display_dinheiro_dezena_expected_prev[4];
	end
	if (
		( display_dinheiro_dezena_expected_prev[5] !== 1'bx ) && ( display_dinheiro_dezena_prev[5] !== display_dinheiro_dezena_expected_prev[5] )
		&& ((display_dinheiro_dezena_expected_prev[5] !== last_display_dinheiro_dezena_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_dezena[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_dezena_expected_prev);
		$display ("     Real value = %b", display_dinheiro_dezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_dinheiro_dezena_exp[5] = display_dinheiro_dezena_expected_prev[5];
	end
	if (
		( display_dinheiro_dezena_expected_prev[6] !== 1'bx ) && ( display_dinheiro_dezena_prev[6] !== display_dinheiro_dezena_expected_prev[6] )
		&& ((display_dinheiro_dezena_expected_prev[6] !== last_display_dinheiro_dezena_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_dezena[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_dezena_expected_prev);
		$display ("     Real value = %b", display_dinheiro_dezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_dinheiro_dezena_exp[6] = display_dinheiro_dezena_expected_prev[6];
	end
	if (
		( display_dinheiro_unidade_expected_prev[0] !== 1'bx ) && ( display_dinheiro_unidade_prev[0] !== display_dinheiro_unidade_expected_prev[0] )
		&& ((display_dinheiro_unidade_expected_prev[0] !== last_display_dinheiro_unidade_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_unidade[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_unidade_expected_prev);
		$display ("     Real value = %b", display_dinheiro_unidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_dinheiro_unidade_exp[0] = display_dinheiro_unidade_expected_prev[0];
	end
	if (
		( display_dinheiro_unidade_expected_prev[1] !== 1'bx ) && ( display_dinheiro_unidade_prev[1] !== display_dinheiro_unidade_expected_prev[1] )
		&& ((display_dinheiro_unidade_expected_prev[1] !== last_display_dinheiro_unidade_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_unidade[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_unidade_expected_prev);
		$display ("     Real value = %b", display_dinheiro_unidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_dinheiro_unidade_exp[1] = display_dinheiro_unidade_expected_prev[1];
	end
	if (
		( display_dinheiro_unidade_expected_prev[2] !== 1'bx ) && ( display_dinheiro_unidade_prev[2] !== display_dinheiro_unidade_expected_prev[2] )
		&& ((display_dinheiro_unidade_expected_prev[2] !== last_display_dinheiro_unidade_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_unidade[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_unidade_expected_prev);
		$display ("     Real value = %b", display_dinheiro_unidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_dinheiro_unidade_exp[2] = display_dinheiro_unidade_expected_prev[2];
	end
	if (
		( display_dinheiro_unidade_expected_prev[3] !== 1'bx ) && ( display_dinheiro_unidade_prev[3] !== display_dinheiro_unidade_expected_prev[3] )
		&& ((display_dinheiro_unidade_expected_prev[3] !== last_display_dinheiro_unidade_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_unidade[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_unidade_expected_prev);
		$display ("     Real value = %b", display_dinheiro_unidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_dinheiro_unidade_exp[3] = display_dinheiro_unidade_expected_prev[3];
	end
	if (
		( display_dinheiro_unidade_expected_prev[4] !== 1'bx ) && ( display_dinheiro_unidade_prev[4] !== display_dinheiro_unidade_expected_prev[4] )
		&& ((display_dinheiro_unidade_expected_prev[4] !== last_display_dinheiro_unidade_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_unidade[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_unidade_expected_prev);
		$display ("     Real value = %b", display_dinheiro_unidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_dinheiro_unidade_exp[4] = display_dinheiro_unidade_expected_prev[4];
	end
	if (
		( display_dinheiro_unidade_expected_prev[5] !== 1'bx ) && ( display_dinheiro_unidade_prev[5] !== display_dinheiro_unidade_expected_prev[5] )
		&& ((display_dinheiro_unidade_expected_prev[5] !== last_display_dinheiro_unidade_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_unidade[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_unidade_expected_prev);
		$display ("     Real value = %b", display_dinheiro_unidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_dinheiro_unidade_exp[5] = display_dinheiro_unidade_expected_prev[5];
	end
	if (
		( display_dinheiro_unidade_expected_prev[6] !== 1'bx ) && ( display_dinheiro_unidade_prev[6] !== display_dinheiro_unidade_expected_prev[6] )
		&& ((display_dinheiro_unidade_expected_prev[6] !== last_display_dinheiro_unidade_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dinheiro_unidade[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dinheiro_unidade_expected_prev);
		$display ("     Real value = %b", display_dinheiro_unidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_dinheiro_unidade_exp[6] = display_dinheiro_unidade_expected_prev[6];
	end
	if (
		( display_salgado_expected_prev[0] !== 1'bx ) && ( display_salgado_prev[0] !== display_salgado_expected_prev[0] )
		&& ((display_salgado_expected_prev[0] !== last_display_salgado_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_salgado[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_salgado_expected_prev);
		$display ("     Real value = %b", display_salgado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_salgado_exp[0] = display_salgado_expected_prev[0];
	end
	if (
		( display_salgado_expected_prev[1] !== 1'bx ) && ( display_salgado_prev[1] !== display_salgado_expected_prev[1] )
		&& ((display_salgado_expected_prev[1] !== last_display_salgado_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_salgado[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_salgado_expected_prev);
		$display ("     Real value = %b", display_salgado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_salgado_exp[1] = display_salgado_expected_prev[1];
	end
	if (
		( display_salgado_expected_prev[2] !== 1'bx ) && ( display_salgado_prev[2] !== display_salgado_expected_prev[2] )
		&& ((display_salgado_expected_prev[2] !== last_display_salgado_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_salgado[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_salgado_expected_prev);
		$display ("     Real value = %b", display_salgado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_salgado_exp[2] = display_salgado_expected_prev[2];
	end
	if (
		( display_salgado_expected_prev[3] !== 1'bx ) && ( display_salgado_prev[3] !== display_salgado_expected_prev[3] )
		&& ((display_salgado_expected_prev[3] !== last_display_salgado_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_salgado[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_salgado_expected_prev);
		$display ("     Real value = %b", display_salgado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_salgado_exp[3] = display_salgado_expected_prev[3];
	end
	if (
		( display_salgado_expected_prev[4] !== 1'bx ) && ( display_salgado_prev[4] !== display_salgado_expected_prev[4] )
		&& ((display_salgado_expected_prev[4] !== last_display_salgado_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_salgado[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_salgado_expected_prev);
		$display ("     Real value = %b", display_salgado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_salgado_exp[4] = display_salgado_expected_prev[4];
	end
	if (
		( display_salgado_expected_prev[5] !== 1'bx ) && ( display_salgado_prev[5] !== display_salgado_expected_prev[5] )
		&& ((display_salgado_expected_prev[5] !== last_display_salgado_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_salgado[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_salgado_expected_prev);
		$display ("     Real value = %b", display_salgado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_salgado_exp[5] = display_salgado_expected_prev[5];
	end
	if (
		( display_salgado_expected_prev[6] !== 1'bx ) && ( display_salgado_prev[6] !== display_salgado_expected_prev[6] )
		&& ((display_salgado_expected_prev[6] !== last_display_salgado_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_salgado[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_salgado_expected_prev);
		$display ("     Real value = %b", display_salgado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_salgado_exp[6] = display_salgado_expected_prev[6];
	end
	if (
		( estado_expected_prev[0] !== 1'bx ) && ( estado_prev[0] !== estado_expected_prev[0] )
		&& ((estado_expected_prev[0] !== last_estado_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estado_exp[0] = estado_expected_prev[0];
	end
	if (
		( estado_expected_prev[1] !== 1'bx ) && ( estado_prev[1] !== estado_expected_prev[1] )
		&& ((estado_expected_prev[1] !== last_estado_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estado_exp[1] = estado_expected_prev[1];
	end
	if (
		( estado_expected_prev[2] !== 1'bx ) && ( estado_prev[2] !== estado_expected_prev[2] )
		&& ((estado_expected_prev[2] !== last_estado_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estado_exp[2] = estado_expected_prev[2];
	end
	if (
		( led_verde_expected_prev !== 1'bx ) && ( led_verde_prev !== led_verde_expected_prev )
		&& ((led_verde_expected_prev !== last_led_verde_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_verde :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_verde_expected_prev);
		$display ("     Real value = %b", led_verde_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_led_verde_exp = led_verde_expected_prev;
	end
	if (
		( led_vermelho_expected_prev !== 1'bx ) && ( led_vermelho_prev !== led_vermelho_expected_prev )
		&& ((led_vermelho_expected_prev !== last_led_vermelho_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_vermelho :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_vermelho_expected_prev);
		$display ("     Real value = %b", led_vermelho_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_led_vermelho_exp = led_vermelho_expected_prev;
	end
	if (
		( saldo_dinheiro_expected_prev[0] !== 1'bx ) && ( saldo_dinheiro_prev[0] !== saldo_dinheiro_expected_prev[0] )
		&& ((saldo_dinheiro_expected_prev[0] !== last_saldo_dinheiro_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saldo_dinheiro[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saldo_dinheiro_expected_prev);
		$display ("     Real value = %b", saldo_dinheiro_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saldo_dinheiro_exp[0] = saldo_dinheiro_expected_prev[0];
	end
	if (
		( saldo_dinheiro_expected_prev[1] !== 1'bx ) && ( saldo_dinheiro_prev[1] !== saldo_dinheiro_expected_prev[1] )
		&& ((saldo_dinheiro_expected_prev[1] !== last_saldo_dinheiro_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saldo_dinheiro[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saldo_dinheiro_expected_prev);
		$display ("     Real value = %b", saldo_dinheiro_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saldo_dinheiro_exp[1] = saldo_dinheiro_expected_prev[1];
	end
	if (
		( saldo_dinheiro_expected_prev[2] !== 1'bx ) && ( saldo_dinheiro_prev[2] !== saldo_dinheiro_expected_prev[2] )
		&& ((saldo_dinheiro_expected_prev[2] !== last_saldo_dinheiro_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saldo_dinheiro[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saldo_dinheiro_expected_prev);
		$display ("     Real value = %b", saldo_dinheiro_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saldo_dinheiro_exp[2] = saldo_dinheiro_expected_prev[2];
	end
	if (
		( saldo_dinheiro_expected_prev[3] !== 1'bx ) && ( saldo_dinheiro_prev[3] !== saldo_dinheiro_expected_prev[3] )
		&& ((saldo_dinheiro_expected_prev[3] !== last_saldo_dinheiro_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saldo_dinheiro[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saldo_dinheiro_expected_prev);
		$display ("     Real value = %b", saldo_dinheiro_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saldo_dinheiro_exp[3] = saldo_dinheiro_expected_prev[3];
	end
	if (
		( saldo_dinheiro_expected_prev[4] !== 1'bx ) && ( saldo_dinheiro_prev[4] !== saldo_dinheiro_expected_prev[4] )
		&& ((saldo_dinheiro_expected_prev[4] !== last_saldo_dinheiro_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saldo_dinheiro[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saldo_dinheiro_expected_prev);
		$display ("     Real value = %b", saldo_dinheiro_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saldo_dinheiro_exp[4] = saldo_dinheiro_expected_prev[4];
	end
	if (
		( saldo_dinheiro_expected_prev[5] !== 1'bx ) && ( saldo_dinheiro_prev[5] !== saldo_dinheiro_expected_prev[5] )
		&& ((saldo_dinheiro_expected_prev[5] !== last_saldo_dinheiro_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saldo_dinheiro[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saldo_dinheiro_expected_prev);
		$display ("     Real value = %b", saldo_dinheiro_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saldo_dinheiro_exp[5] = saldo_dinheiro_expected_prev[5];
	end
	if (
		( saldo_dinheiro_expected_prev[6] !== 1'bx ) && ( saldo_dinheiro_prev[6] !== saldo_dinheiro_expected_prev[6] )
		&& ((saldo_dinheiro_expected_prev[6] !== last_saldo_dinheiro_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saldo_dinheiro[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saldo_dinheiro_expected_prev);
		$display ("     Real value = %b", saldo_dinheiro_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saldo_dinheiro_exp[6] = saldo_dinheiro_expected_prev[6];
	end
	if (
		( saldo_dinheiro_expected_prev[7] !== 1'bx ) && ( saldo_dinheiro_prev[7] !== saldo_dinheiro_expected_prev[7] )
		&& ((saldo_dinheiro_expected_prev[7] !== last_saldo_dinheiro_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saldo_dinheiro[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saldo_dinheiro_expected_prev);
		$display ("     Real value = %b", saldo_dinheiro_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saldo_dinheiro_exp[7] = saldo_dinheiro_expected_prev[7];
	end
	if (
		( saldo_dinheiro_expected_prev[8] !== 1'bx ) && ( saldo_dinheiro_prev[8] !== saldo_dinheiro_expected_prev[8] )
		&& ((saldo_dinheiro_expected_prev[8] !== last_saldo_dinheiro_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saldo_dinheiro[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saldo_dinheiro_expected_prev);
		$display ("     Real value = %b", saldo_dinheiro_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saldo_dinheiro_exp[8] = saldo_dinheiro_expected_prev[8];
	end
	if (
		( saldo_dinheiro_expected_prev[9] !== 1'bx ) && ( saldo_dinheiro_prev[9] !== saldo_dinheiro_expected_prev[9] )
		&& ((saldo_dinheiro_expected_prev[9] !== last_saldo_dinheiro_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saldo_dinheiro[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saldo_dinheiro_expected_prev);
		$display ("     Real value = %b", saldo_dinheiro_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saldo_dinheiro_exp[9] = saldo_dinheiro_expected_prev[9];
	end
	if (
		( valor_salgado_expected_prev[0] !== 1'bx ) && ( valor_salgado_prev[0] !== valor_salgado_expected_prev[0] )
		&& ((valor_salgado_expected_prev[0] !== last_valor_salgado_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor_salgado[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_salgado_expected_prev);
		$display ("     Real value = %b", valor_salgado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_valor_salgado_exp[0] = valor_salgado_expected_prev[0];
	end
	if (
		( valor_salgado_expected_prev[1] !== 1'bx ) && ( valor_salgado_prev[1] !== valor_salgado_expected_prev[1] )
		&& ((valor_salgado_expected_prev[1] !== last_valor_salgado_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor_salgado[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_salgado_expected_prev);
		$display ("     Real value = %b", valor_salgado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_valor_salgado_exp[1] = valor_salgado_expected_prev[1];
	end
	if (
		( valor_salgado_expected_prev[2] !== 1'bx ) && ( valor_salgado_prev[2] !== valor_salgado_expected_prev[2] )
		&& ((valor_salgado_expected_prev[2] !== last_valor_salgado_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor_salgado[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_salgado_expected_prev);
		$display ("     Real value = %b", valor_salgado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_valor_salgado_exp[2] = valor_salgado_expected_prev[2];
	end
	if (
		( valor_salgado_expected_prev[3] !== 1'bx ) && ( valor_salgado_prev[3] !== valor_salgado_expected_prev[3] )
		&& ((valor_salgado_expected_prev[3] !== last_valor_salgado_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor_salgado[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_salgado_expected_prev);
		$display ("     Real value = %b", valor_salgado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_valor_salgado_exp[3] = valor_salgado_expected_prev[3];
	end
	if (
		( valor_salgado_expected_prev[4] !== 1'bx ) && ( valor_salgado_prev[4] !== valor_salgado_expected_prev[4] )
		&& ((valor_salgado_expected_prev[4] !== last_valor_salgado_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor_salgado[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_salgado_expected_prev);
		$display ("     Real value = %b", valor_salgado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_valor_salgado_exp[4] = valor_salgado_expected_prev[4];
	end
	if (
		( valor_salgado_expected_prev[5] !== 1'bx ) && ( valor_salgado_prev[5] !== valor_salgado_expected_prev[5] )
		&& ((valor_salgado_expected_prev[5] !== last_valor_salgado_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor_salgado[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_salgado_expected_prev);
		$display ("     Real value = %b", valor_salgado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_valor_salgado_exp[5] = valor_salgado_expected_prev[5];
	end
	if (
		( valor_salgado_expected_prev[6] !== 1'bx ) && ( valor_salgado_prev[6] !== valor_salgado_expected_prev[6] )
		&& ((valor_salgado_expected_prev[6] !== last_valor_salgado_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor_salgado[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_salgado_expected_prev);
		$display ("     Real value = %b", valor_salgado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_valor_salgado_exp[6] = valor_salgado_expected_prev[6];
	end
	if (
		( valor_salgado_expected_prev[7] !== 1'bx ) && ( valor_salgado_prev[7] !== valor_salgado_expected_prev[7] )
		&& ((valor_salgado_expected_prev[7] !== last_valor_salgado_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor_salgado[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_salgado_expected_prev);
		$display ("     Real value = %b", valor_salgado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_valor_salgado_exp[7] = valor_salgado_expected_prev[7];
	end
	if (
		( valor_salgado_expected_prev[8] !== 1'bx ) && ( valor_salgado_prev[8] !== valor_salgado_expected_prev[8] )
		&& ((valor_salgado_expected_prev[8] !== last_valor_salgado_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor_salgado[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_salgado_expected_prev);
		$display ("     Real value = %b", valor_salgado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_valor_salgado_exp[8] = valor_salgado_expected_prev[8];
	end
	if (
		( valor_salgado_expected_prev[9] !== 1'bx ) && ( valor_salgado_prev[9] !== valor_salgado_expected_prev[9] )
		&& ((valor_salgado_expected_prev[9] !== last_valor_salgado_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor_salgado[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_salgado_expected_prev);
		$display ("     Real value = %b", valor_salgado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_valor_salgado_exp[9] = valor_salgado_expected_prev[9];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Maquina_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg confirmar_moeda;
reg confirmar_salgado;
reg contador;
reg iniciar;
reg liberar;
reg [1:0] moedas;
reg reset;
// wires                                               
wire [6:0] display_dinheiro_centena;
wire [6:0] display_dinheiro_dezena;
wire [6:0] display_dinheiro_unidade;
wire [6:0] display_salgado;
wire [2:0] estado;
wire led_verde;
wire led_vermelho;
wire [9:0] saldo_dinheiro;
wire [9:0] valor_salgado;

wire sampler;                             

// assign statements (if any)                          
Maquina i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.confirmar_moeda(confirmar_moeda),
	.confirmar_salgado(confirmar_salgado),
	.contador(contador),
	.display_dinheiro_centena(display_dinheiro_centena),
	.display_dinheiro_dezena(display_dinheiro_dezena),
	.display_dinheiro_unidade(display_dinheiro_unidade),
	.display_salgado(display_salgado),
	.estado(estado),
	.iniciar(iniciar),
	.led_verde(led_verde),
	.led_vermelho(led_vermelho),
	.liberar(liberar),
	.moedas(moedas),
	.reset(reset),
	.saldo_dinheiro(saldo_dinheiro),
	.valor_salgado(valor_salgado)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
end 

// iniciar
initial
begin
	iniciar = 1'b0;
	iniciar = #20000 1'b1;
	iniciar = #10000 1'b0;
	iniciar = #830000 1'b1;
	iniciar = #10000 1'b0;
	iniciar = #70000 1'b1;
	iniciar = #10000 1'b0;
end 

// liberar
initial
begin
	liberar = 1'b0;
	liberar = #820000 1'b1;
	liberar = #10000 1'b0;
end 

// contador
initial
begin
	contador = 1'b1;
	contador = #100000 1'b0;
	contador = #10000 1'b1;
	contador = #30000 1'b0;
	contador = #10000 1'b1;
	contador = #30000 1'b0;
	contador = #10000 1'b1;
	contador = #30000 1'b0;
	contador = #10000 1'b1;
	contador = #30000 1'b0;
	contador = #10000 1'b1;
end 
// moedas[ 1 ]
initial
begin
	moedas[1] = 1'b0;
	moedas[1] = #550000 1'b1;
	moedas[1] = #30000 1'b0;
	moedas[1] = #50000 1'b1;
	moedas[1] = #30000 1'b0;
	moedas[1] = #50000 1'b1;
	moedas[1] = #30000 1'b0;
end 
// moedas[ 0 ]
initial
begin
	moedas[0] = 1'b0;
	moedas[0] = #550000 1'b1;
	moedas[0] = #30000 1'b0;
	moedas[0] = #50000 1'b1;
	moedas[0] = #30000 1'b0;
end 

// confirmar_salgado
initial
begin
	confirmar_salgado = 1'b1;
	confirmar_salgado = #340000 1'b0;
	confirmar_salgado = #10000 1'b1;
end 

// confirmar_moeda
initial
begin
	confirmar_moeda = 1'b1;
	confirmar_moeda = #560000 1'b0;
	confirmar_moeda = #10000 1'b1;
	confirmar_moeda = #70000 1'b0;
	confirmar_moeda = #10000 1'b1;
	confirmar_moeda = #70000 1'b0;
	confirmar_moeda = #10000 1'b1;
end 

Maquina_vlg_sample_tst tb_sample (
	.clk(clk),
	.confirmar_moeda(confirmar_moeda),
	.confirmar_salgado(confirmar_salgado),
	.contador(contador),
	.iniciar(iniciar),
	.liberar(liberar),
	.moedas(moedas),
	.reset(reset),
	.sampler_tx(sampler)
);

Maquina_vlg_check_tst tb_out(
	.display_dinheiro_centena(display_dinheiro_centena),
	.display_dinheiro_dezena(display_dinheiro_dezena),
	.display_dinheiro_unidade(display_dinheiro_unidade),
	.display_salgado(display_salgado),
	.estado(estado),
	.led_verde(led_verde),
	.led_vermelho(led_vermelho),
	.saldo_dinheiro(saldo_dinheiro),
	.valor_salgado(valor_salgado),
	.sampler_rx(sampler)
);
endmodule

